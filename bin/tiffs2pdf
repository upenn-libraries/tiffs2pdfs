#!/usr/bin/env bash

# Author: Doug Emery <emeryr@upenn.edu>

read -r -d '' HELP <<-'EOF'

Given a SOURCE_DIR containing PDF's create a PDF of all the PDF's combined. Thus:

    $ tiffs2pdf /path/to/my_tiffs

`tiffs2pdf` will create a PDF in the directory with the same name as the
source directory base name + `.pdf`:

    /path/to/my_tiffs/my_tiffs.pdf

NOTE: This script is designed for SCETI-generated images. SCETI always generates
a reference TIFF with each set of images. This file is named something like:

    mscoll955_box7_folder9_test\ ref\ 1.tif

This script will skip any TIFF with `ref` in its name.  Obviously, this could
cause problem with some file name patterns. If that problem comes up, we can
fix the script then.

If needed, each TIFF is shrunk to a maximum pixel length of 1800 pixels on its
longest side, and converted to a PDF with 150 DPI density. As a matter of
course the sub-image at index 1 is deleted. This is done to remove embedded
thumbnails in SCETI TIFFs.

EOF

################################################################################
### ENV STUFF
COMMAND=`basename $0`
# Load basic functions; primarily messaging functions
# Rename file name here to match actual functions
source "`dirname $0`/tiffs2pdfs-functions"

################################################################################
### TEMPFILES
# From:
#   http://stackoverflow.com/questions/430078/shell-script-templates
# create a default tmp file name
tmp=${TMPDIR:-/tmp}/prog.$$
# delete any existing temp files
trap "rm -f $tmp.?; exit 1" 1 2 3 13 15
trap "rm -f $tmp.?; exit" 0
# then do
#   ...real work that creates temp files $tmp.1, $tmp.2, ...

################################################################################
#### USAGE AND ERRORS
# Note that LOGFILE is used by functions for log commands: log_message,
# log_warning, log_error, etc.
#
# replace log file with another value if you want
LOGFILE=LOG_${COMMAND}_`tstamp`.log

usage() {
   echo "Usage: $COMMAND [OPTS] SOURCE_DIR"
   echo
   echo "OPTIONS"
   echo "     -h      help message"
   echo "     -o      output directory"

Create a PDF from all TIFFs in SOURCE_DIR. It is assumed that TIFF lexical
order is correct for PDF page order.
EOF
}

print_help() {
  echo "$HELP"
}

################################################################################
### OPTIONS
while getopts "ho:" opt; do
  case $opt in
    h)
      usage
      print_help
      exit 1
      ;;
    \?)
      echo "ERROR Invalid option: -$OPTARG" >&2
      echo ""
      usage
      exit 1
      ;;
    o)
      OUTDIR=$OPTARG
  esac
done

# TODO: Add options for max px size and density
# TODO: Add options for splitting large folders into multiple PDFs
# TODO: Add option for cleaning up work folders or not
# TODO: Make it possible to convert JPEGs as well

shift $((OPTIND-1))


################################################################################
### THESCRIPT


SOURCE_DIR=$1
if dir_exists "$SOURCE_DIR" SOURCE_DIR; then
  message "Using SOURCE_DIR: $SOURCE_DIR"
else
  error "Could not find SOURCE_DIR: $SOURCE_DIR"
fi

OUTDIR=$(cd ${OUTDIR:=$SOURCE_DIR}; pwd)
message "Using output directory: $OUTDIR"

filelist=$tmp.1
# ls "$SOURCE_DIR"/*.tif | grep -v ref | head -4 > $filelist
ls "$SOURCE_DIR"/CN*.tif | grep -v ref > $filelist

if [ ! -s $filelist ]; then
  error "No TIFFs found in SOURCE_DIR: $SOURCE_DIR"
fi

PDF_DIR="$SOURCE_DIR/pdf"
if [ ! -d "$PDF_DIR" ]; then
  if ! mkdir "$PDF_DIR" ; then
    error "Could not make PDF dir $PDF_DIR"
  fi
fi

while read image
do
  base=`basename "$image" .tif`
  # jpg="$PDF_DIR/${base}.jpg"
  pdf="$PDF_DIR/${base}.pdf"

  # TODO: Be smart at deleting sub images; use identify to find thumbnail
  # Convert  the image to a pdf, remove any thumbnail, shrink to 1800 px on
  # long side (do not enlarge; the '\>' operator), set px density to 150.
  convert "$image" -delete 1--1 -resize 1800x1800\> -density 150 "$pdf"
  if [ $? -eq 0 ]; then
    message "Wrote $pdf"
  else
    warning "Error converting $image to PDF"
  fi
done < $filelist

basedir=`basename $SOURCE_DIR`
outpdf="$OUTDIR/${basedir}.pdf"

if [ -f "$outpdf" ]; then
  backup="$outpdf"-`tstamp`
  warning "Output PDF exists backing up to: $backup"
  mv "$outpdf" "$backup"
fi

(
cd $PDF_DIR
pdfmerge *.pdf "$outpdf"
)
message "Wrote $outpdf"


################################################################################
### EXIT
# http://stackoverflow.com/questions/430078/shell-script-templates
rm -f $tmp.?
trap 0
exit 0
